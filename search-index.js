var searchIndex = JSON.parse('{\
"stdmath":{"doc":"","i":[[3,"Sigma","stdmath","",null,null],[3,"Product","","",null,null],[4,"Method","","Method by which to process combinatorics",null,null],[13,"Repeat","","",0,null],[13,"NoRepeat","","",0,null],[5,"sigma","","Returns the summation of functionally transformed items…",null,[[["rangeinclusive",3]],["sigma",3]]],[5,"product","","Returns the product of functionally transformed items from…",null,[[["rangeinclusive",3]],["product",3]]],[5,"factorial","","Returns the computed factorial of a number",null,[[],["product",3]]],[5,"factorial_count","","Returns the number of digits of a factorial computation",null,[[]]],[5,"combination","","Returns the computed combination `nCr`",null,[[["method",4]]]],[5,"permutation","","Returns the computed permutation `nPr`",null,[[["method",4]]]],[5,"binomial","","Returns the binomial expansion of the equation `(a + b) ^ n`",null,[[]]],[5,"pascals","","Returns a vector of vectors of representing n layers of a…",null,[[],[["vec",3],["vec",3]]]],[5,"ramanujansPI","","Returns the value of PI using Ramanujan’s Formula",null,[[]]],[0,"core","","",null,null],[3,"FlippedIteratorOfTypes","stdmath::core","An iterator that flips the type variant of it\'s items.",null,null],[3,"TransformedValue","","",null,null],[4,"Type","","Provides a means to represent the state of a value.",null,null],[13,"Normal","","context | value | identity | indirect identity…",1,null],[13,"Inverse","","context | value | identity | indirect identity…",1,null],[4,"ContextVal","","",null,null],[13,"Multiple","","",2,null],[13,"Single","","",2,null],[4,"Context","","",null,null],[13,"Add","","",3,null],[13,"Mul","","",3,null],[13,"Nil","","",3,null],[5,"sum","","",null,[[],["context",4]]],[5,"mul","","",null,[[],["context",4]]],[5,"sigma","","",null,[[["intoiterator",8],["copy",8],["fn",8]],["context",4]]],[5,"product","","",null,[[["intoiterator",8],["copy",8],["fn",8]],["context",4]]],[8,"Flippable","","An interface for flipping an iterator of types.",null,null],[10,"flip","","",4,[[],["flippediteratoroftypes",3]]],[8,"Simplify","","Trait for values that can be simplified.",null,null],[10,"simplify","","This method serializes `self` into any `file` that…",5,[[["write",8]],["result",6]]],[11,"repr","","This helper method serializes `self` into a [`String`].",5,[[],[["error",3],["string",3],["result",4]]]],[8,"Resolve","","Trait for objects that can be resolved to a value.",null,null],[16,"Result","","The result of the object resolution.",6,null],[10,"resolve","","This method resolves `self` into it\'s equivalent…",6,[[["box",3]]]],[10,"as_any","","This method transposes `self` into a dynamic…",6,[[],["any",8]]],[10,"is_friendly_with","","This method determines whether the type behind the dynamic…",6,[[["resolve",8]]]],[10,"_cmp","","This method partially compares `self` with the type behind…",6,[[["resolve",8]],[["option",4],["ordering",4]]]],[11,"_clone","","This method enables cloning trait objects that implements…",6,[[],[["box",3],["resolve",8]]]],[11,"_debug","","This method enables debugging trait objects that…",6,[[["formatter",3]],["result",6]]],[10,"_hash","","This method enables hashing trait objects that implements…",6,[[["hasher",8]]]],[10,"to_context","","This method allows wrapping a resolvable value into a…",6,[[],["context",4]]],[11,"flip","","Inverts the state of the Type.",1,[[]]],[11,"is_inverted","","Matches the type variant, returning true if self is…",1,[[]]],[11,"unwrap","","Extracts the value contained in a variant of `Type`.",1,[[]]],[11,"map","","Transform the value within the type variant, returning the…",1,[[["fn",8]],["type",4]]],[11,"as_ref","","Converts from a `&Type<T>` to a `Type<&T>`.",1,[[],["type",4]]],[11,"as_mut","","Converts from a `&mut Type<T>` to a `Type<&mut T>`.",1,[[],["type",4]]],[11,"multiple","","",2,[[],["option",4]]],[11,"single","","",2,[[],["option",4]]],[11,"resolve","","",3,[[]]],[11,"dump","","",3,[[],[["contextval",4],["vec",3],["box",3]]]],[11,"get_ref","","",3,[[],[["contextval",4],["box",3],["vec",3]]]],[11,"is_additive","","",3,[[]]],[11,"to_valid_or","","",3,[[]]],[11,"resolve","","",7,[[]]],[0,"exclude","stdmath","",null,null],[3,"ExcludedIterator","stdmath::exclude","",null,null],[4,"OverflowState","","",null,null],[13,"Excluded","","",8,null],[13,"Included","","",8,null],[8,"ExcludedIteratorExt","","",null,null],[16,"Item","","",9,null],[11,"exclude","","",9,[[["iterator",8]],[["excludediterator",3],["iterator",8]]]],[11,"new","","",10,[[]]],[11,"with_transformer","","",10,[[],["excludediterator",3]]],[11,"include_overflow","","",10,[[],["excludediterator",3]]],[11,"include_overflow_with","","",10,[[],["excludediterator",3]]],[8,"One","stdmath","Defines a multiplicative identity element for Self.",null,null],[10,"one","","",11,[[]]],[8,"Pow","","Trait for pow-supported numbers.",null,null],[16,"Output","","",12,null],[10,"pow","","",12,[[]]],[8,"Zero","","Defines a additive identity element for Self.",null,null],[10,"zero","","",13,[[]]],[11,"new","","",14,[[["rangeinclusive",3]]]],[11,"compute","","",14,[[]]],[11,"new","","",15,[[["rangeinclusive",3]]]],[11,"compute","","",15,[[]]],[14,"stage_default_methods","","",null,null],[14,"ctx","","",null,null],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_string","","",14,[[],["string",3]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_string","","",15,[[],["string",3]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","stdmath::core","",16,[[]]],[11,"into","","",16,[[]]],[11,"into_iter","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"into_iter","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","stdmath::exclude","",10,[[]]],[11,"into","","",10,[[]]],[11,"into_iter","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"simplify","stdmath::core","",3,[[["write",8]],["result",6]]],[11,"simplify","","",7,[[["write",8]],["result",6]]],[11,"is_friendly_with","","",3,[[["resolve",8]]]],[11,"as_any","","",3,[[],["any",8]]],[11,"_cmp","","",3,[[["resolve",8]],[["ordering",4],["option",4]]]],[11,"_debug","","",3,[[["formatter",3]],["result",6]]],[11,"_clone","","",3,[[],[["resolve",8],["box",3]]]],[11,"_hash","","",3,[[["hasher",8]]]],[11,"to_context","","",3,[[],["context",4]]],[11,"resolve","","",3,[[["box",3]]]],[11,"is_friendly_with","","",7,[[["resolve",8]]]],[11,"to_context","","",7,[[],["context",4]]],[11,"as_any","","",7,[[],["any",8]]],[11,"_cmp","","",7,[[["resolve",8]],[["ordering",4],["option",4]]]],[11,"_debug","","",7,[[["formatter",3]],["result",6]]],[11,"_clone","","",7,[[],[["resolve",8],["box",3]]]],[11,"_hash","","",7,[[["hasher",8]]]],[11,"resolve","","",7,[[["box",3]]]],[11,"next","","",1,[[],["option",4]]],[11,"next","","",16,[[],["option",4]]],[11,"next","stdmath::exclude","",10,[[],["option",4]]],[11,"clone","stdmath::core","",1,[[],["type",4]]],[11,"clone","","",16,[[],["flippediteratoroftypes",3]]],[11,"clone","","",3,[[]]],[11,"clone","","",7,[[],["transformedvalue",3]]],[11,"clone","stdmath::exclude","",8,[[],["overflowstate",4]]],[11,"clone","","",10,[[],["excludediterator",3]]],[11,"cmp","stdmath::core","",1,[[["type",4]],["ordering",4]]],[11,"eq","","",1,[[["type",4]]]],[11,"ne","","",1,[[["type",4]]]],[11,"eq","","",6,[[]]],[11,"eq","","",2,[[["contextval",4]]]],[11,"ne","","",2,[[["contextval",4]]]],[11,"eq","","",3,[[]]],[11,"eq","","",7,[[["transformedvalue",3]]]],[11,"eq","stdmath","",14,[[]]],[11,"eq","","",15,[[]]],[11,"partial_cmp","stdmath::core","",1,[[["type",4]],[["option",4],["ordering",4]]]],[11,"lt","","",1,[[["type",4]]]],[11,"le","","",1,[[["type",4]]]],[11,"gt","","",1,[[["type",4]]]],[11,"ge","","",1,[[["type",4]]]],[11,"partial_cmp","","",6,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",2,[[["contextval",4]],[["option",4],["ordering",4]]]],[11,"lt","","",2,[[["contextval",4]]]],[11,"le","","",2,[[["contextval",4]]]],[11,"gt","","",2,[[["contextval",4]]]],[11,"ge","","",2,[[["contextval",4]]]],[11,"partial_cmp","","",3,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",7,[[["transformedvalue",3]],[["option",4],["ordering",4]]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","stdmath","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"div","stdmath::core","",3,[[]]],[11,"div","","",3,[[]]],[11,"div","","",3,[[]]],[11,"div","","",3,[[]]],[11,"div","","",3,[[]]],[11,"div","","",3,[[]]],[11,"div","","",3,[[]]],[11,"div","","",3,[[]]],[11,"div","","",3,[[]]],[11,"div","","",3,[[]]],[11,"div","","",3,[[]]],[11,"div","","",3,[[]]],[11,"div","","",3,[[]]],[11,"div","","",3,[[]]],[11,"div","","",3,[[]]],[11,"div","","",7,[[["context",4]]]],[11,"div","","",3,[[["transformedvalue",3]]]],[11,"div","stdmath","",14,[[]]],[11,"div","","",15,[[]]],[11,"div","","proposition | representation | result | representation…",15,[[]]],[11,"sub","stdmath::core","",3,[[]]],[11,"sub","","",3,[[]]],[11,"sub","","",3,[[]]],[11,"sub","","",3,[[]]],[11,"sub","","",3,[[]]],[11,"sub","","",3,[[]]],[11,"sub","","",3,[[]]],[11,"sub","","",3,[[]]],[11,"sub","","",3,[[]]],[11,"sub","","",3,[[]]],[11,"sub","","",3,[[]]],[11,"sub","","",3,[[]]],[11,"sub","","",3,[[]]],[11,"sub","","",3,[[]]],[11,"sub","","",3,[[]]],[11,"sub","","",7,[[["context",4]]]],[11,"sub","","",3,[[["transformedvalue",3]]]],[11,"sub","stdmath","",14,[[]]],[11,"sub","","",15,[[]]],[11,"add","stdmath::core","",3,[[]]],[11,"add","","",3,[[]]],[11,"add","","",3,[[]]],[11,"add","","",3,[[]]],[11,"add","","",3,[[]]],[11,"add","","",3,[[]]],[11,"add","","",3,[[]]],[11,"add","","",3,[[]]],[11,"add","","",3,[[]]],[11,"add","","",3,[[]]],[11,"add","","",3,[[]]],[11,"add","","",3,[[]]],[11,"add","","",3,[[]]],[11,"add","","",3,[[]]],[11,"add","","",3,[[]]],[11,"add","","",7,[[["context",4]]]],[11,"add","","",3,[[["transformedvalue",3]]]],[11,"add","stdmath","",14,[[]]],[11,"add","","",15,[[]]],[11,"mul","stdmath::core","",3,[[]]],[11,"mul","","",3,[[]]],[11,"mul","","",3,[[]]],[11,"mul","","",3,[[]]],[11,"mul","","",3,[[]]],[11,"mul","","",3,[[]]],[11,"mul","","",3,[[]]],[11,"mul","","",3,[[]]],[11,"mul","","",3,[[]]],[11,"mul","","",3,[[]]],[11,"mul","","",3,[[]]],[11,"mul","","",3,[[]]],[11,"mul","","",3,[[]]],[11,"mul","","",3,[[]]],[11,"mul","","",3,[[]]],[11,"mul","","",7,[[["context",4]]]],[11,"mul","","",3,[[["transformedvalue",3]]]],[11,"mul","stdmath","",14,[[]]],[11,"mul","","",15,[[]]],[11,"hash","stdmath::core","",1,[[]]],[11,"hash","","",2,[[]]],[11,"hash","","",3,[[]]],[11,"hash","","",7,[[]]]],"p":[[4,"Method"],[4,"Type"],[4,"ContextVal"],[4,"Context"],[8,"Flippable"],[8,"Simplify"],[8,"Resolve"],[3,"TransformedValue"],[4,"OverflowState"],[8,"ExcludedIteratorExt"],[3,"ExcludedIterator"],[8,"One"],[8,"Pow"],[8,"Zero"],[3,"Sigma"],[3,"Product"],[3,"FlippedIteratorOfTypes"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);