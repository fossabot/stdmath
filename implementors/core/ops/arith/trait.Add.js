(function() {var implementors = {};
implementors["stdmath"] = [{"text":"impl&lt;R:&nbsp;'static&gt; Add&lt;Context&lt;R&gt;&gt; for Context&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: One + Zero + Mul + Add + Div&lt;Output = R&gt; + Sub&lt;Output = R&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Add&lt;Context&lt;&lt;i8 as Resolve&gt;::Result&gt;&gt; for i8","synthetic":false,"types":[]},{"text":"impl Add&lt;i8&gt; for Context&lt;&lt;i8 as Resolve&gt;::Result&gt;","synthetic":false,"types":[]},{"text":"impl Add&lt;Context&lt;&lt;i16 as Resolve&gt;::Result&gt;&gt; for i16","synthetic":false,"types":[]},{"text":"impl Add&lt;i16&gt; for Context&lt;&lt;i16 as Resolve&gt;::Result&gt;","synthetic":false,"types":[]},{"text":"impl Add&lt;Context&lt;&lt;i32 as Resolve&gt;::Result&gt;&gt; for i32","synthetic":false,"types":[]},{"text":"impl Add&lt;i32&gt; for Context&lt;&lt;i32 as Resolve&gt;::Result&gt;","synthetic":false,"types":[]},{"text":"impl Add&lt;Context&lt;&lt;i64 as Resolve&gt;::Result&gt;&gt; for i64","synthetic":false,"types":[]},{"text":"impl Add&lt;i64&gt; for Context&lt;&lt;i64 as Resolve&gt;::Result&gt;","synthetic":false,"types":[]},{"text":"impl Add&lt;Context&lt;&lt;isize as Resolve&gt;::Result&gt;&gt; for isize","synthetic":false,"types":[]},{"text":"impl Add&lt;isize&gt; for Context&lt;&lt;isize as Resolve&gt;::Result&gt;","synthetic":false,"types":[]},{"text":"impl Add&lt;Context&lt;&lt;u8 as Resolve&gt;::Result&gt;&gt; for u8","synthetic":false,"types":[]},{"text":"impl Add&lt;u8&gt; for Context&lt;&lt;u8 as Resolve&gt;::Result&gt;","synthetic":false,"types":[]},{"text":"impl Add&lt;Context&lt;&lt;u16 as Resolve&gt;::Result&gt;&gt; for u16","synthetic":false,"types":[]},{"text":"impl Add&lt;u16&gt; for Context&lt;&lt;u16 as Resolve&gt;::Result&gt;","synthetic":false,"types":[]},{"text":"impl Add&lt;Context&lt;&lt;u32 as Resolve&gt;::Result&gt;&gt; for u32","synthetic":false,"types":[]},{"text":"impl Add&lt;u32&gt; for Context&lt;&lt;u32 as Resolve&gt;::Result&gt;","synthetic":false,"types":[]},{"text":"impl Add&lt;Context&lt;&lt;u64 as Resolve&gt;::Result&gt;&gt; for u64","synthetic":false,"types":[]},{"text":"impl Add&lt;u64&gt; for Context&lt;&lt;u64 as Resolve&gt;::Result&gt;","synthetic":false,"types":[]},{"text":"impl Add&lt;Context&lt;&lt;usize as Resolve&gt;::Result&gt;&gt; for usize","synthetic":false,"types":[]},{"text":"impl Add&lt;usize&gt; for Context&lt;&lt;usize as Resolve&gt;::Result&gt;","synthetic":false,"types":[]},{"text":"impl Add&lt;Context&lt;&lt;f32 as Resolve&gt;::Result&gt;&gt; for f32","synthetic":false,"types":[]},{"text":"impl Add&lt;f32&gt; for Context&lt;&lt;f32 as Resolve&gt;::Result&gt;","synthetic":false,"types":[]},{"text":"impl Add&lt;Context&lt;&lt;f64 as Resolve&gt;::Result&gt;&gt; for f64","synthetic":false,"types":[]},{"text":"impl Add&lt;f64&gt; for Context&lt;&lt;f64 as Resolve&gt;::Result&gt;","synthetic":false,"types":[]},{"text":"impl Add&lt;Context&lt;&lt;i128 as Resolve&gt;::Result&gt;&gt; for i128","synthetic":false,"types":[]},{"text":"impl Add&lt;i128&gt; for Context&lt;&lt;i128 as Resolve&gt;::Result&gt;","synthetic":false,"types":[]},{"text":"impl Add&lt;Context&lt;&lt;u128 as Resolve&gt;::Result&gt;&gt; for u128","synthetic":false,"types":[]},{"text":"impl Add&lt;u128&gt; for Context&lt;&lt;u128 as Resolve&gt;::Result&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Simplify + Clone + Hash + Debug + PartialOrd + 'static, R:&nbsp;One + Zero + Mul + Add + Div&lt;Output = R&gt; + Sub&lt;Output = R&gt; + 'static, F:&nbsp;Fn(T) -&gt; R + Clone + 'static&gt; Add&lt;Context&lt;R&gt;&gt; for TransformedValue&lt;T, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Simplify + Clone + Hash + Debug + PartialOrd + 'static, R:&nbsp;One + Zero + Mul + Add + Div&lt;Output = R&gt; + Sub&lt;Output = R&gt; + 'static, F:&nbsp;Fn(T) -&gt; R + Clone + 'static&gt; Add&lt;TransformedValue&lt;T, F&gt;&gt; for Context&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, R, F&gt; Add&lt;R&gt; for Sigma&lt;T, R, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Step,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sum + Add&lt;Output = R&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Fn(T) -&gt; R,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, R, F&gt; Add&lt;R&gt; for Product&lt;T, R, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Step,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Product + Add&lt;Output = R&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Fn(T) -&gt; R,&nbsp;</span>","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()